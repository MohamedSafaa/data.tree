% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/node_conversion_dataframe.R
\name{as.data.frame.Node}
\alias{ToDataFrameTable}
\alias{ToDataFrameTaxonomy}
\alias{ToDataFrameTree}
\alias{as.data.frame.Node}
\title{Convert a \code{Node} to a \code{data.frame}}
\usage{
\method{as.data.frame}{Node}(x, row.names = NULL, optional = FALSE, ...,
  traversal = c("pre-order", "post-order", "in-order", "level", "ancestor"),
  pruneFun = NULL, filterFun = NULL, inheritFromAncestors = FALSE)

ToDataFrameTree(x, ..., pruneFun = NULL)

ToDataFrameTable(x, ..., pruneFun = NULL)

ToDataFrameTaxonomy(x, ..., pruneFun = NULL, inheritFromAncestors = FALSE)
}
\arguments{
\item{x}{The root node of a tree or sub-tree to convert to a data.frame}

\item{row.names}{\code{NULL} or a character vector giving the row names for the data frame.
Missing values are not allowed.}

\item{optional}{logical. If \code{TRUE}, setting row names and converting column names
(to syntactic names: see make.names) is optional.}

\item{...}{the attributes to be added as columns of the data.frame. See \code{\link{Get}} for details.
If a specific Node does not contain the attribute, \code{NA} is added to the data.frame.}

\item{traversal}{any of 'pre-order' (the default), 'post-order', 'in-order', 'level', or 'ancestor'. See \code{\link{Traverse}} for details.}

\item{pruneFun}{a function taking a \code{Node} as an argument. See \code{\link{Traverse}} for details.}

\item{filterFun}{a function taking a \code{Node} as an argument. See \code{\link{Traverse}} for details.}

\item{inheritFromAncestors}{if FALSE, and if the attribute is a field or a method, then only a \code{Node} itself is
searched for the field/method. If TRUE, and if the \code{Node} does not contain the attribute, then ancestors are also searched.}
}
\value{
ToDataFrameTree: a \code{data.frame}, where each row represents a \code{Node} in the tree or sub-tree
spanned by \code{x}, possibly pruned according to \code{pruneFun}.

ToDataFrameTable: a \code{data.frame}, where each row represents a leaf \code{Node} in the tree or sub-tree
spanned by \code{x}, possibly pruned according to \code{pruneFun}.

ToDataFrameTaxonomy: a \code{data.frame}, where each row represents a \code{Node} in the tree or sub-tree
spanned by \code{x}, possibly pruned according to \code{pruneFun}. The first column is called 'children', while the
second is called 'parents', describing the parent to child edge. The third column is caled 'level'. x itself is not returned.
}
\description{
Convert a \code{Node} to a \code{data.frame}
}
\examples{
data(acme)
acme$fieldsAll
as.data.frame(acme, row.names = NULL, optional = FALSE, "cost", "p")

ToDataFrameTree(acme, "cost", "p")
ToDataFrameTaxonomy(acme, "cost", "p")
ToDataFrameTable(acme, "cost", "p")

#use the pruneFun:
acme$Do(function(x) x$totalCost <- Aggregate(x, "cost", sum), traversal = "post-order")
ToDataFrameTree(acme, "totalCost", pruneFun = function(x) x$totalCost > 300000)

#inherit
acme$Set(floor = c(1, 2, 3), filterFun = function(x) x$level == 2)
as.data.frame(acme, row.names = NULL, optional = FALSE, "floor", inheritFromAncestors = FALSE)
as.data.frame(acme, row.names = NULL, optional = FALSE, "floor", inheritFromAncestors = TRUE)

#using a function as an attribute:
acc <- acme$Climb("Accounting")
acc$Head <- "Mrs. Numright"
rs <- acme$Climb("Research")
rs$Head <- "Mr. Stein"
it <- acme$Climb("IT")
it$Head <- "Mr. Squarehead"
ToDataFrameTable(acme, department = function(x) x$parent$name, "name", "Head", "cost")
}

